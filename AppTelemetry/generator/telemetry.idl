/*
 * (c) 2024 Copyright, Real-Time Innovations, Inc.  All rights reserved.
 *
 * RTI grants Licensee a license to use, modify, compile, and create derivative
 * works of the Software.  Licensee has the right to distribute object form
 * only for use with RTI products.  The Software is provided "as is", with no
 * warranty of any type, including any warranty for fitness for any purpose.
 * RTI is under no obligation to maintain or support the Software.  RTI shall
 * not be liable for any incidental or consequential damages arising out of the
 * use or inability to use the software.
 */

module Metrics {

    typedef string<256> MetricName;
    typedef string<512> MetricDescription;
    typedef string<64> MetricUnit; 
    typedef string<256> LabelKey;
    typedef string<256> LabelValue;

    @appendable
    struct UInt64Counter {
        uint64 value;
    };

    @appendable
    struct DoubleCounter {
        double value;
    };    

    struct Label {
        LabelKey key;
        LabelValue value;
    };

    @appendable
    struct UInt64Histogram {
        sequence<Label> labels;
        sequence<uint64> buckets;
    };

    @appendable
    struct DoubleHistogram {
        sequence<Label> labels;
        sequence<double> buckets;
    };

    @appendable
    struct UInt64UpDownCounter {
        uint64 value;
    };

    @appendable
    struct DoubleUpDownCounter {
        double value;
    };   

    @appendable
    struct Int64Gauge {
        int64 value;
    };

    @appendable
    struct DoubleGauge {
        double value;
    };  

    @appendable
    union MetricUnion switch (long) {
        case 0: UInt64Counter uint64_counter;
        case 1: DoubleCounter double_counter;
        case 2: UInt64Histogram uint64_histogram;
        case 3: DoubleHistogram double_histogram;
        case 4: UInt64UpDownCounter uint64_updown_counter;
        case 5: DoubleUpDownCounter double_updown_counter;
        case 6: Int64Gauge int64_gauge;
        case 7: DoubleGauge double_gauge; 
    };

    @appendable
    struct Metric {
        @key MetricName name; // No spaces, no special characters
        MetricDescription description;
        @key MetricUnit unit; // https://unitsofmeasure.org/ucum
        MetricUnion data;
        @optional sequence<Label> labels; // Additional labels for the metric
    };
};